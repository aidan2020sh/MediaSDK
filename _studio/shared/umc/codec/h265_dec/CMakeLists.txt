mfx_include_dirs( )

include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/include )
include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/../../core/umc/include )
include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/../../core/vm/include )
include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/../../core/vm_plus/include )
include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/../../io/media_buffers/include )
include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/../../../include )
include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/../../../../../../mdp_msdk-api/include )
include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/../../../../mfx_lib/shared/include )
include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/../../io/umc_va/include )
include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/../../../../mfx_lib/optimization/h264/include )

set( defs "-DAS_HEVCD_PLUGIN ${WARNING_FLAGS}" )
set( sources "" )
file( GLOB_RECURSE srcs "src/*.c" "src/*.cpp" )
list( APPEND sources ${srcs}) 

make_library( umc_h265 sw static )

list(REMOVE_ITEM sources ${CMAKE_CURRENT_SOURCE_DIR}/src/umc_h265_bitstream_cabac.cpp)
list(REMOVE_ITEM sources ${CMAKE_CURRENT_SOURCE_DIR}/src/umc_h265_bitstream.cpp)
list(REMOVE_ITEM sources ${CMAKE_CURRENT_SOURCE_DIR}/src/umc_h265_coding_unit.cpp)
list(REMOVE_ITEM sources ${CMAKE_CURRENT_SOURCE_DIR}/src/umc_h265_frame_coding_data.cpp)
list(REMOVE_ITEM sources ${CMAKE_CURRENT_SOURCE_DIR}/src/umc_h265_intrapred.cpp)
list(REMOVE_ITEM sources ${CMAKE_CURRENT_SOURCE_DIR}/src/umc_h265_ipplevel.cpp)
list(REMOVE_ITEM sources ${CMAKE_CURRENT_SOURCE_DIR}/src/umc_h265_prediction.cpp)
list(REMOVE_ITEM sources ${CMAKE_CURRENT_SOURCE_DIR}/src/umc_h265_sao.cpp)
list(REMOVE_ITEM sources ${CMAKE_CURRENT_SOURCE_DIR}/src/umc_h265_segment_decoder_deblocking.cpp)
list(REMOVE_ITEM sources ${CMAKE_CURRENT_SOURCE_DIR}/src/umc_h265_segment_decoder.cpp)
list(REMOVE_ITEM sources ${CMAKE_CURRENT_SOURCE_DIR}/src/umc_h265_segment_decoder_mt.cpp)
list(REMOVE_ITEM sources ${CMAKE_CURRENT_SOURCE_DIR}/src/umc_h265_tr_quant.cpp)

make_library( umc_h265 hw static )
set( defs "" )
