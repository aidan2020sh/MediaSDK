//
// INTEL CORPORATION PROPRIETARY INFORMATION
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement with Intel Corporation and may not be copied
// or disclosed except in accordance with the terms of that agreement.
//
// Copyright(C) 2008-2016 Intel Corporation. All Rights Reserved.
//

#include "mfx_common.h"
#if defined (MFX_ENABLE_H265_VIDEO_ENCODE)

#ifdef MFX_VA

#include "cmrt_cross_platform.h"
#include "mfx_h265_cmcopy.h"
using namespace H265Enc;
using namespace MfxEnumShortAliases;

namespace {
    const Ipp32u CmDeviceCreationOptions = (3 << 4) + 1;
    const Ipp32s BLOCKW = 32;
    const Ipp32s BLOCKH = 8;
    extern const unsigned char genx_hevce_copy_video_to_system_hsw[1454];
    extern const unsigned char genx_hevce_copy_video_to_system_bdw[1454];
};

namespace {
    template <size_t N> Ipp32s LoadProgram(CmDevice *device, CmProgram *&program, const Ipp8u (&code)[N])
    {
        return device->LoadProgram((void*)code, N, program, "nojitter");
    }
}

CmCopy::CmCopy() : m_device(), m_program(), m_kernel(), m_queue(), m_task(), m_threadSpace(),
    m_width(), m_height(), m_paddingLuW(), m_paddingChW() {}

mfxStatus CmCopy::Init(mfxHDL handle, mfxHandleType handleType)
{
    Ipp32u version;
    Ipp32s cmerr = CM_SUCCESS;
#if defined(_WIN32) || defined(_WIN64)
    if (handleType == MFX_HANDLE_D3D9_DEVICE_MANAGER)
        cmerr = CreateCmDevice(m_device, version, (IDirect3DDeviceManager9 *)handle, CmDeviceCreationOptions);
    else if (handleType == MFX_HANDLE_D3D11_DEVICE)
        cmerr = CreateCmDevice(m_device, version, (ID3D11Device *)handle, CmDeviceCreationOptions);
#endif
#if defined(MFX_VA_LINUX)
    if (handleType == MFX_HANDLE_VA_DISPLAY)
        cmerr = CreateCmDevice(m_device, version, (VADisplay *)handle, CmDeviceCreationOptions);
#endif
    if (cmerr != CM_SUCCESS || m_device == NULL)
        return MFX_ERR_DEVICE_FAILED;

    size_t size = 4;
    Ipp32u gpu = PLATFORM_INTEL_UNKNOWN;
    if ((cmerr = m_device->GetCaps(CAP_GPU_PLATFORM, size, &gpu)) != CM_SUCCESS)
        return Close(), MFX_ERR_DEVICE_FAILED;

    switch (gpu) {
    case PLATFORM_INTEL_HSW: cmerr = LoadProgram(m_device, m_program, genx_hevce_copy_video_to_system_hsw); break;
    case PLATFORM_INTEL_BDW: cmerr = LoadProgram(m_device, m_program, genx_hevce_copy_video_to_system_bdw); break;
    default: return Close(), MFX_ERR_DEVICE_FAILED;
    }
    if (cmerr != CM_SUCCESS)
        return Close(), MFX_ERR_DEVICE_FAILED;

    if ((cmerr = m_device->CreateKernel(m_program, "CopyVideoToSystem420", m_kernel)) != CM_SUCCESS)
        return Close(), MFX_ERR_DEVICE_FAILED;

    if ((cmerr = m_device->CreateQueue(m_queue)) != CM_SUCCESS)
        return Close(), MFX_ERR_DEVICE_FAILED;

    if ((cmerr = m_device->CreateTask(m_task)) != CM_SUCCESS)
        return Close(), MFX_ERR_DEVICE_FAILED;

    return MFX_ERR_NONE;
}

mfxStatus CmCopy::SetParam(Ipp32s width, Ipp32s height, Ipp32s fourcc, Ipp32s pitchLuma, Ipp32s pitchChroma, Ipp32s paddingLuW, Ipp32s paddingChW)
{
    Ipp32s bpp = (fourcc == NV12) ? 1 : 2;
    Ipp32u requiredPitch;
    Ipp32u requiredSize;
    Ipp32s cmerr = CM_SUCCESS;
    if ((cmerr = m_device->GetSurface2DInfo((width + 2 * paddingLuW) * bpp, height, CM_SURFACE_FORMAT_P8, requiredPitch, requiredSize)) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;
    if (requiredPitch != pitchLuma)
        return MFX_ERR_UNSUPPORTED;
    if ((cmerr = m_device->GetSurface2DInfo((width + 2 * paddingChW) * bpp, height, CM_SURFACE_FORMAT_P8, requiredPitch, requiredSize)) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;
    if (requiredPitch != pitchChroma)
        return MFX_ERR_UNSUPPORTED;

    if ((cmerr = m_device->CreateThreadSpace((width * bpp + BLOCKW - 1) / BLOCKW, (height + BLOCKH - 1) / BLOCKH, m_threadSpace)) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;

    m_width = width * bpp;
    m_height = height;
    m_paddingLuW = paddingLuW * bpp;
    m_paddingChW = paddingChW * bpp;
    return MFX_ERR_NONE;
}

struct CopyCallData {
    CopyCallData(CmDevice *device_, CmQueue *queue_) : device(device_), queue(queue_), in(), outLuma(), outChroma(), event() {}
    ~CopyCallData() {
        if (device) {
            if (in) device->DestroySurface(in);
            if (outLuma) device->DestroySurface2DUP(outLuma);
            if (outChroma) device->DestroySurface2DUP(outChroma);
        }
        if (queue && event)
            queue->DestroyEvent(event);
    }
    CmDevice *device;
    CmQueue *queue;
    CmSurface2D *in;
    CmSurface2DUP *outLuma;
    CmSurface2DUP *outChroma;
    CmEvent *event;
};

mfxStatus CmCopy::Copy(mfxHDL video, Ipp8u *luma, Ipp8u *chroma)
{
    CopyCallData data(m_device, m_queue);

    Ipp32s cmerr = CM_SUCCESS;
    if ((cmerr = m_device->CreateSurface2D(video, data.in)) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;
    if ((cmerr = m_device->CreateSurface2DUP(m_width + 2 * m_paddingLuW, m_height, CM_SURFACE_FORMAT_P8, luma - m_paddingLuW, data.outLuma)) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;
    if ((cmerr = m_device->CreateSurface2DUP(m_width + 2 * m_paddingChW, m_height/2, CM_SURFACE_FORMAT_P8, chroma - m_paddingChW, data.outChroma)) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;

    if ((cmerr = m_kernel->SetThreadCount(((m_width + BLOCKW - 1) / BLOCKW) * ((m_height + BLOCKH - 1) / BLOCKH))) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;

    SurfaceIndex *inIdx = NULL, *outLumaIdx = NULL, *outChromaIdx = NULL;
    if ((cmerr = data.in->GetIndex(inIdx)) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;
    if ((cmerr = data.outLuma->GetIndex(outLumaIdx)) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;
    if ((cmerr = data.outChroma->GetIndex(outChromaIdx)) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;
    if ((cmerr = m_kernel->SetKernelArg(0, sizeof(SurfaceIndex), inIdx)) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;
    if ((cmerr = m_kernel->SetKernelArg(1, sizeof(SurfaceIndex), outLumaIdx)) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;
    if ((cmerr = m_kernel->SetKernelArg(2, sizeof(SurfaceIndex), outChromaIdx)) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;
    if ((cmerr = m_kernel->SetKernelArg(3, sizeof(Ipp32u), &m_paddingLuW)) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;
    if ((cmerr = m_kernel->SetKernelArg(4, sizeof(Ipp32u), &m_paddingChW)) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;

    if ((cmerr = m_task->Reset()) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;
    if ((cmerr = m_task->AddKernel(m_kernel)) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;

    if ((cmerr = m_queue->Enqueue(m_task, data.event, m_threadSpace)) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;
    if ((cmerr = data.event->WaitForTaskFinished(CM_MAX_TIMEOUT_MS)) != CM_SUCCESS)
        return MFX_ERR_DEVICE_FAILED;

    return MFX_ERR_NONE;
}

void CmCopy::Close()
{
    if (m_device) {
        if (m_program) {
            m_device->DestroyProgram(m_program);
            m_program = NULL;
        }
        if (m_kernel) {
            m_device->DestroyKernel(m_kernel);
            m_kernel = NULL;
        }
        if (m_queue) {
            m_queue = NULL;
        }
        if (m_task) {
            m_device->DestroyTask(m_task);
            m_task = NULL;
        }
        if (m_threadSpace) {
            m_device->DestroyThreadSpace(m_threadSpace);
            m_threadSpace = NULL;
        }

        DestroyCmDevice(m_device);
        m_device = NULL;
    }
}

namespace {
const unsigned char genx_hevce_copy_video_to_system_hsw[1454] = { 
0x43,0x49,0x53,0x41,0x03,0x01,0x01,0x00,0x14,0x43,0x6f,0x70,0x79,0x56,0x69,0x64,
0x65,0x6f,0x54,0x6f,0x53,0x79,0x73,0x74,0x65,0x6d,0x34,0x32,0x30,0x3b,0x00,0x00,
0x00,0xab,0x03,0x00,0x00,0x30,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0xe6,
0x03,0x00,0x00,0xc8,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x26,0x00,0x00,0x43,0x6f,
0x70,0x79,0x56,0x69,0x64,0x65,0x6f,0x54,0x6f,0x53,0x79,0x73,0x74,0x65,0x6d,0x34,
0x32,0x30,0x00,0x41,0x73,0x6d,0x4e,0x61,0x6d,0x65,0x00,0x53,0x4c,0x4d,0x53,0x69,
0x7a,0x65,0x00,0x53,0x75,0x72,0x66,0x61,0x63,0x65,0x55,0x73,0x61,0x67,0x65,0x00,
0x4f,0x75,0x74,0x70,0x75,0x74,0x00,0x4c,0x36,0x00,0x4c,0x37,0x00,0x4c,0x38,0x00,
0x4c,0x39,0x00,0x4c,0x31,0x30,0x00,0x4c,0x31,0x31,0x00,0x4c,0x31,0x32,0x00,0x4c,
0x31,0x33,0x00,0x4c,0x31,0x34,0x00,0x4c,0x31,0x35,0x00,0x4c,0x31,0x36,0x00,0x4c,
0x31,0x37,0x00,0x4c,0x31,0x38,0x00,0x4c,0x31,0x39,0x00,0x4c,0x32,0x30,0x00,0x4c,
0x32,0x31,0x00,0x4c,0x32,0x32,0x00,0x4c,0x32,0x33,0x00,0x4c,0x32,0x34,0x00,0x4c,
0x32,0x35,0x00,0x4c,0x32,0x36,0x00,0x4c,0x32,0x37,0x00,0x4c,0x32,0x38,0x00,0x4c,
0x32,0x39,0x00,0x4c,0x33,0x30,0x00,0x4c,0x33,0x31,0x00,0x4c,0x33,0x32,0x00,0x4c,
0x33,0x33,0x00,0x4c,0x33,0x34,0x00,0x4c,0x33,0x35,0x00,0x4c,0x33,0x36,0x00,0x4c,
0x33,0x37,0x00,0x01,0x00,0x17,0x00,0x0c,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x0d,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x12,
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x12,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x11,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,
0x21,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x00,0x21,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x14,0x00,0x00,0x01,0x00,0x25,0x00,0x00,0x00,0x00,0x00,0x15,
0x00,0x00,0x01,0x00,0x26,0x00,0x00,0x00,0x00,0x00,0x16,0x00,0x64,0x00,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x17,0x00,0x21,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x18,0x00,0x21,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x00,0x00,0x01,0x00,
0x2a,0x00,0x00,0x00,0x00,0x00,0x1a,0x00,0x00,0x01,0x00,0x2b,0x00,0x00,0x00,0x00,
0x00,0x1b,0x00,0x21,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x00,0x21,0x01,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1d,0x00,0x00,0x01,0x00,0x2e,0x00,0x00,0x00,
0x00,0x00,0x1e,0x00,0x00,0x01,0x00,0x2f,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x64,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x21,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x21,0x00,0x21,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x00,
0x00,0x01,0x00,0x33,0x00,0x00,0x00,0x00,0x00,0x23,0x00,0x00,0x01,0x00,0x34,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,0x00,0x00,0x07,0x00,
0x00,0x00,0x08,0x00,0x01,0x00,0x0f,0x00,0x00,0x00,0x24,0x00,0x00,0x00,0x25,0x00,
0x00,0x00,0x00,0x03,0x09,0x00,0x01,0x00,0x01,0x04,0x00,0x01,0x00,0x0a,0x00,0x01,
0x00,0x01,0x04,0x00,0x01,0x00,0x0b,0x00,0x01,0x00,0x01,0x04,0x00,0x01,0x00,0x00,
0x05,0x02,0x06,0x00,0x20,0x00,0x04,0x00,0x02,0x07,0x00,0x24,0x00,0x04,0x00,0x02,
0x08,0x00,0x28,0x00,0x04,0x00,0x00,0x20,0x00,0x2c,0x00,0x04,0x00,0x00,0x21,0x00,
0x30,0x00,0x04,0x00,0x5c,0x01,0x00,0x00,0x4f,0x02,0x00,0x00,0x02,0x00,0x02,0x00,
0x25,0x67,0x65,0x6e,0x78,0x5f,0x68,0x65,0x76,0x63,0x65,0x5f,0x63,0x6f,0x70,0x79,
0x5f,0x76,0x69,0x64,0x65,0x6f,0x5f,0x74,0x6f,0x5f,0x73,0x79,0x73,0x74,0x65,0x6d,
0x5f,0x30,0x2e,0x61,0x73,0x6d,0x03,0x00,0x01,0x00,0x31,0x00,0x00,0x31,0x01,0x00,
0x30,0x02,0x00,0x29,0x00,0x00,0x00,0x00,0x22,0x00,0x00,0x00,0x00,0x02,0x00,0x01,
0x00,0x00,0x00,0x21,0x01,0x31,0x03,0x00,0x29,0x00,0x00,0x00,0x00,0x23,0x00,0x00,
0x00,0x00,0x02,0x00,0x02,0x00,0x00,0x00,0x21,0x01,0x10,0x00,0x00,0x00,0x00,0x24,
0x00,0x00,0x00,0x00,0x02,0x00,0x22,0x00,0x00,0x00,0x21,0x01,0x05,0x02,0x20,0x00,
0x00,0x00,0x29,0x00,0x00,0x00,0x00,0x25,0x00,0x00,0x00,0x00,0x02,0x00,0x24,0x00,
0x00,0x00,0x21,0x01,0x10,0x00,0x00,0x00,0x00,0x26,0x00,0x00,0x00,0x00,0x02,0x00,
0x23,0x00,0x00,0x00,0x21,0x01,0x05,0x02,0x08,0x00,0x00,0x00,0x37,0x00,0x06,0x00,
0x20,0x08,0x00,0x27,0x00,0x00,0x00,0x21,0x01,0x00,0x28,0x00,0x00,0x00,0x21,0x01,
0x29,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2a,0x00,0x00,0x00,0x00,0x02,0x00,
0x20,0x00,0x00,0x00,0x21,0x01,0x00,0x24,0x00,0x00,0x00,0x21,0x01,0x29,0x00,0x00,
0x00,0x00,0x2b,0x00,0x00,0x00,0x00,0x02,0x00,0x26,0x00,0x00,0x00,0x21,0x01,0x38,
0x00,0x07,0x00,0x20,0x08,0x00,0x2c,0x00,0x00,0x00,0x21,0x01,0x00,0x2d,0x00,0x00,
0x00,0x21,0x01,0x29,0x00,0x00,0x00,0x29,0x00,0x00,0x00,0x00,0x2e,0x00,0x00,0x00,
0x00,0x02,0x00,0x24,0x00,0x00,0x00,0x21,0x01,0x10,0x00,0x00,0x00,0x00,0x2f,0x00,
0x00,0x00,0x00,0x02,0x00,0x23,0x00,0x00,0x00,0x21,0x01,0x05,0x02,0x04,0x00,0x00,
0x00,0x37,0x00,0x06,0x01,0x20,0x04,0x00,0x30,0x00,0x00,0x00,0x21,0x01,0x00,0x31,
0x00,0x00,0x00,0x21,0x01,0x32,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x33,0x00,
0x00,0x00,0x00,0x02,0x00,0x21,0x00,0x00,0x00,0x21,0x01,0x00,0x24,0x00,0x00,0x00,
0x21,0x01,0x29,0x00,0x00,0x00,0x00,0x34,0x00,0x00,0x00,0x00,0x02,0x00,0x2f,0x00,
0x00,0x00,0x21,0x01,0x38,0x00,0x08,0x00,0x20,0x04,0x00,0x35,0x00,0x00,0x00,0x21,
0x01,0x00,0x36,0x00,0x00,0x00,0x21,0x01,0x32,0x00,0x00,0x00,0x31,0x04,0x00,0x34,
0x00,0x00,0x00,0x31,0x05,0x00,0x05,0x00,0x00,0x00,0x29,0x2d,0x40,0x20,0x04,0x00,
0x00,0x00,0xff,0x01,0xff,0x01,0x41,0x00,0x00,0x00,0x21,0x2d,0x38,0x20,0x40,0x00,
0x00,0x00,0x20,0x00,0x20,0x00,0x01,0x0d,0x01,0x20,0x07,0x02,0x00,0x00,0x05,0x00,
0x00,0x00,0x29,0x2d,0x34,0x20,0x06,0x00,0x00,0x00,0xff,0x01,0xff,0x01,0x01,0x02,
0x00,0x00,0x61,0x00,0x48,0x20,0x00,0x00,0x00,0x00,0x1f,0x00,0x07,0x00,0x40,0x02,
0x00,0x00,0x20,0x0c,0x00,0x22,0x20,0x00,0x00,0x00,0x00,0x00,0x89,0x02,0x01,0x0d,
0x01,0x20,0x07,0x0b,0x00,0x00,0x01,0x00,0x00,0x00,0xbd,0x03,0x40,0x20,0x38,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x00,0x00,0x00,0x25,0x2d,0x44,0x20,0x34,0x00,
0x00,0x00,0x08,0x00,0x08,0x00,0x31,0xcd,0x00,0x2c,0x00,0x03,0x02,0x10,0x01,0x00,
0x00,0x00,0xbd,0x03,0x64,0x21,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,
0x00,0x00,0x61,0x00,0x68,0x21,0x00,0x00,0x00,0x00,0x1f,0x00,0x07,0x00,0x40,0x02,
0x00,0x00,0x20,0x0c,0x00,0x22,0x24,0x00,0x00,0x00,0x00,0x80,0x0a,0x12,0x40,0x00,
0x00,0x00,0x25,0x04,0x60,0x21,0x2c,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x01,0x0d,
0x01,0x20,0x07,0x02,0x00,0x00,0x01,0x17,0x01,0x20,0x07,0x12,0x09,0x00,0x01,0x17,
0x01,0x20,0x07,0x0e,0x05,0x00,0x01,0x17,0x01,0x20,0x07,0x10,0x07,0x00,0x01,0x0d,
0x01,0x20,0x07,0x07,0x00,0x00,0x01,0x17,0x01,0x20,0x07,0x0c,0x03,0x00,0x31,0x02,
0x60,0x0c,0xa0,0x03,0x00,0x20,0x60,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x01,0x00,
0x00,0x00,0xbd,0x03,0x40,0x20,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x00,
0x00,0x00,0x25,0x2d,0x44,0x20,0x34,0x00,0x00,0x00,0x04,0x00,0x04,0x00,0x40,0x02,
0x00,0x00,0x20,0x0c,0x00,0x22,0x20,0x00,0x00,0x00,0x01,0x00,0x49,0x02,0x01,0x02,
0x00,0x00,0x61,0x00,0x48,0x20,0x00,0x00,0x00,0x00,0x1f,0x00,0x03,0x00,0x31,0xcd,
0x00,0x2c,0x00,0x03,0x02,0x10,0x01,0x00,0x00,0x00,0xbd,0x03,0xe4,0x20,0x44,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x00,0x00,0x61,0x00,0xe8,0x20,0x00,0x00,
0x00,0x00,0x1f,0x00,0x03,0x00,0x40,0x02,0x00,0x00,0x20,0x0c,0x00,0x22,0x28,0x00,
0x00,0x00,0x00,0x80,0x0a,0x0a,0x40,0x00,0x00,0x00,0x25,0x04,0xe0,0x20,0x30,0x00,
0x00,0x00,0x38,0x00,0x00,0x00,0x01,0x17,0x01,0x20,0x07,0x0a,0x05,0x00,0x01,0x17,
0x01,0x20,0x07,0x08,0x03,0x00,0x31,0x02,0x60,0x0c,0xa0,0x03,0x00,0x20,0xe0,0x00,
0x00,0x00,0x00,0x02,0x00,0x00,0x01,0x0d,0x01,0x20,0x07,0x70,0x00,0x00,0x31,0x00,
0x00,0x07,0xa0,0x0f,0x00,0x20,0x00,0x0e,0x00,0x00,0x10,0x00,0x00,0x82
};

const unsigned char genx_hevce_copy_video_to_system_bdw[1454] = { 
0x43,0x49,0x53,0x41,0x03,0x01,0x01,0x00,0x14,0x43,0x6f,0x70,0x79,0x56,0x69,0x64,
0x65,0x6f,0x54,0x6f,0x53,0x79,0x73,0x74,0x65,0x6d,0x34,0x32,0x30,0x3b,0x00,0x00,
0x00,0xab,0x03,0x00,0x00,0x30,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0xe6,
0x03,0x00,0x00,0xc8,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x26,0x00,0x00,0x43,0x6f,
0x70,0x79,0x56,0x69,0x64,0x65,0x6f,0x54,0x6f,0x53,0x79,0x73,0x74,0x65,0x6d,0x34,
0x32,0x30,0x00,0x41,0x73,0x6d,0x4e,0x61,0x6d,0x65,0x00,0x53,0x4c,0x4d,0x53,0x69,
0x7a,0x65,0x00,0x53,0x75,0x72,0x66,0x61,0x63,0x65,0x55,0x73,0x61,0x67,0x65,0x00,
0x4f,0x75,0x74,0x70,0x75,0x74,0x00,0x4c,0x36,0x00,0x4c,0x37,0x00,0x4c,0x38,0x00,
0x4c,0x39,0x00,0x4c,0x31,0x30,0x00,0x4c,0x31,0x31,0x00,0x4c,0x31,0x32,0x00,0x4c,
0x31,0x33,0x00,0x4c,0x31,0x34,0x00,0x4c,0x31,0x35,0x00,0x4c,0x31,0x36,0x00,0x4c,
0x31,0x37,0x00,0x4c,0x31,0x38,0x00,0x4c,0x31,0x39,0x00,0x4c,0x32,0x30,0x00,0x4c,
0x32,0x31,0x00,0x4c,0x32,0x32,0x00,0x4c,0x32,0x33,0x00,0x4c,0x32,0x34,0x00,0x4c,
0x32,0x35,0x00,0x4c,0x32,0x36,0x00,0x4c,0x32,0x37,0x00,0x4c,0x32,0x38,0x00,0x4c,
0x32,0x39,0x00,0x4c,0x33,0x30,0x00,0x4c,0x33,0x31,0x00,0x4c,0x33,0x32,0x00,0x4c,
0x33,0x33,0x00,0x4c,0x33,0x34,0x00,0x4c,0x33,0x35,0x00,0x4c,0x33,0x36,0x00,0x4c,
0x33,0x37,0x00,0x01,0x00,0x17,0x00,0x0c,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x0d,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x12,
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x12,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x11,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,
0x21,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x00,0x21,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x14,0x00,0x00,0x01,0x00,0x25,0x00,0x00,0x00,0x00,0x00,0x15,
0x00,0x00,0x01,0x00,0x26,0x00,0x00,0x00,0x00,0x00,0x16,0x00,0x64,0x00,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x17,0x00,0x21,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x18,0x00,0x21,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x00,0x00,0x01,0x00,
0x2a,0x00,0x00,0x00,0x00,0x00,0x1a,0x00,0x00,0x01,0x00,0x2b,0x00,0x00,0x00,0x00,
0x00,0x1b,0x00,0x21,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x00,0x21,0x01,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1d,0x00,0x00,0x01,0x00,0x2e,0x00,0x00,0x00,
0x00,0x00,0x1e,0x00,0x00,0x01,0x00,0x2f,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x64,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x21,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x21,0x00,0x21,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x00,
0x00,0x01,0x00,0x33,0x00,0x00,0x00,0x00,0x00,0x23,0x00,0x00,0x01,0x00,0x34,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,0x00,0x00,0x07,0x00,
0x00,0x00,0x08,0x00,0x01,0x00,0x0f,0x00,0x00,0x00,0x24,0x00,0x00,0x00,0x25,0x00,
0x00,0x00,0x00,0x03,0x09,0x00,0x01,0x00,0x01,0x04,0x00,0x01,0x00,0x0a,0x00,0x01,
0x00,0x01,0x04,0x00,0x01,0x00,0x0b,0x00,0x01,0x00,0x01,0x04,0x00,0x01,0x00,0x00,
0x05,0x02,0x06,0x00,0x20,0x00,0x04,0x00,0x02,0x07,0x00,0x24,0x00,0x04,0x00,0x02,
0x08,0x00,0x28,0x00,0x04,0x00,0x00,0x20,0x00,0x2c,0x00,0x04,0x00,0x00,0x21,0x00,
0x30,0x00,0x04,0x00,0x5c,0x01,0x00,0x00,0x4f,0x02,0x00,0x00,0x02,0x00,0x02,0x00,
0x25,0x67,0x65,0x6e,0x78,0x5f,0x68,0x65,0x76,0x63,0x65,0x5f,0x63,0x6f,0x70,0x79,
0x5f,0x76,0x69,0x64,0x65,0x6f,0x5f,0x74,0x6f,0x5f,0x73,0x79,0x73,0x74,0x65,0x6d,
0x5f,0x30,0x2e,0x61,0x73,0x6d,0x03,0x00,0x01,0x00,0x31,0x00,0x00,0x31,0x01,0x00,
0x30,0x02,0x00,0x29,0x00,0x00,0x00,0x00,0x22,0x00,0x00,0x00,0x00,0x02,0x00,0x01,
0x00,0x00,0x00,0x21,0x01,0x31,0x03,0x00,0x29,0x00,0x00,0x00,0x00,0x23,0x00,0x00,
0x00,0x00,0x02,0x00,0x02,0x00,0x00,0x00,0x21,0x01,0x10,0x00,0x00,0x00,0x00,0x24,
0x00,0x00,0x00,0x00,0x02,0x00,0x22,0x00,0x00,0x00,0x21,0x01,0x05,0x02,0x20,0x00,
0x00,0x00,0x29,0x00,0x00,0x00,0x00,0x25,0x00,0x00,0x00,0x00,0x02,0x00,0x24,0x00,
0x00,0x00,0x21,0x01,0x10,0x00,0x00,0x00,0x00,0x26,0x00,0x00,0x00,0x00,0x02,0x00,
0x23,0x00,0x00,0x00,0x21,0x01,0x05,0x02,0x08,0x00,0x00,0x00,0x37,0x00,0x06,0x00,
0x20,0x08,0x00,0x27,0x00,0x00,0x00,0x21,0x01,0x00,0x28,0x00,0x00,0x00,0x21,0x01,
0x29,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x2a,0x00,0x00,0x00,0x00,0x02,0x00,
0x20,0x00,0x00,0x00,0x21,0x01,0x00,0x24,0x00,0x00,0x00,0x21,0x01,0x29,0x00,0x00,
0x00,0x00,0x2b,0x00,0x00,0x00,0x00,0x02,0x00,0x26,0x00,0x00,0x00,0x21,0x01,0x38,
0x00,0x07,0x00,0x20,0x08,0x00,0x2c,0x00,0x00,0x00,0x21,0x01,0x00,0x2d,0x00,0x00,
0x00,0x21,0x01,0x29,0x00,0x00,0x00,0x29,0x00,0x00,0x00,0x00,0x2e,0x00,0x00,0x00,
0x00,0x02,0x00,0x24,0x00,0x00,0x00,0x21,0x01,0x10,0x00,0x00,0x00,0x00,0x2f,0x00,
0x00,0x00,0x00,0x02,0x00,0x23,0x00,0x00,0x00,0x21,0x01,0x05,0x02,0x04,0x00,0x00,
0x00,0x37,0x00,0x06,0x01,0x20,0x04,0x00,0x30,0x00,0x00,0x00,0x21,0x01,0x00,0x31,
0x00,0x00,0x00,0x21,0x01,0x32,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x33,0x00,
0x00,0x00,0x00,0x02,0x00,0x21,0x00,0x00,0x00,0x21,0x01,0x00,0x24,0x00,0x00,0x00,
0x21,0x01,0x29,0x00,0x00,0x00,0x00,0x34,0x00,0x00,0x00,0x00,0x02,0x00,0x2f,0x00,
0x00,0x00,0x21,0x01,0x38,0x00,0x08,0x00,0x20,0x04,0x00,0x35,0x00,0x00,0x00,0x21,
0x01,0x00,0x36,0x00,0x00,0x00,0x21,0x01,0x32,0x00,0x00,0x00,0x31,0x04,0x00,0x34,
0x00,0x00,0x00,0x31,0x05,0x00,0x05,0x00,0x00,0x00,0x48,0x12,0x40,0x20,0x04,0x00,
0x00,0x16,0xff,0x01,0xff,0x01,0x41,0x00,0x00,0x00,0x08,0x12,0x38,0x20,0x40,0x00,
0x00,0x16,0x20,0x00,0x20,0x00,0x01,0x4d,0x00,0x20,0x07,0x02,0x00,0x00,0x05,0x00,
0x00,0x00,0x48,0x12,0x34,0x20,0x06,0x00,0x00,0x16,0xff,0x01,0xff,0x01,0x01,0x00,
0x00,0x00,0x0c,0x06,0x48,0x20,0x00,0x00,0x00,0x00,0x1f,0x00,0x07,0x00,0x40,0x00,
0x00,0x00,0x04,0x02,0x00,0x22,0x20,0x00,0x00,0x06,0x00,0x00,0x89,0x02,0x01,0x4d,
0x00,0x20,0x07,0x0b,0x00,0x00,0x01,0x00,0x00,0x00,0x28,0x02,0x40,0x20,0x38,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x00,0x00,0x00,0x28,0x12,0x44,0x20,0x34,0x00,
0x00,0x16,0x08,0x00,0x08,0x00,0x31,0xcd,0x00,0x2c,0x00,0x03,0x02,0x10,0x01,0x00,
0x00,0x00,0x28,0x0a,0x64,0x21,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,
0x00,0x00,0x0c,0x06,0x68,0x21,0x00,0x00,0x00,0x00,0x1f,0x00,0x07,0x00,0x40,0x00,
0x00,0x00,0x04,0x02,0x00,0x22,0x24,0x00,0x00,0x06,0x00,0x80,0x0a,0x12,0x40,0x00,
0x00,0x00,0x28,0x02,0x60,0x21,0x2c,0x00,0x00,0x02,0x38,0x00,0x00,0x00,0x01,0x4d,
0x00,0x20,0x07,0x02,0x00,0x00,0x01,0x57,0x00,0x20,0x07,0x12,0x09,0x00,0x01,0x57,
0x00,0x20,0x07,0x0e,0x05,0x00,0x01,0x57,0x00,0x20,0x07,0x10,0x07,0x00,0x01,0x4d,
0x00,0x20,0x07,0x07,0x00,0x00,0x01,0x57,0x00,0x20,0x07,0x0c,0x03,0x00,0x31,0x00,
0x60,0x0c,0x04,0x3a,0x00,0x20,0x60,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x01,0x00,
0x00,0x00,0x28,0x02,0x40,0x20,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x00,
0x00,0x00,0x28,0x12,0x44,0x20,0x34,0x00,0x00,0x16,0x04,0x00,0x04,0x00,0x40,0x00,
0x00,0x00,0x04,0x02,0x00,0x22,0x20,0x00,0x00,0x06,0x01,0x00,0x49,0x02,0x01,0x00,
0x00,0x00,0x0c,0x06,0x48,0x20,0x00,0x00,0x00,0x00,0x1f,0x00,0x03,0x00,0x31,0xcd,
0x00,0x2c,0x00,0x03,0x02,0x10,0x01,0x00,0x00,0x00,0x28,0x0a,0xe4,0x20,0x44,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0c,0x06,0xe8,0x20,0x00,0x00,
0x00,0x00,0x1f,0x00,0x03,0x00,0x40,0x00,0x00,0x00,0x04,0x02,0x00,0x22,0x28,0x00,
0x00,0x06,0x00,0x80,0x0a,0x0a,0x40,0x00,0x00,0x00,0x28,0x02,0xe0,0x20,0x30,0x00,
0x00,0x02,0x38,0x00,0x00,0x00,0x01,0x57,0x00,0x20,0x07,0x0a,0x05,0x00,0x01,0x57,
0x00,0x20,0x07,0x08,0x03,0x00,0x31,0x00,0x60,0x0c,0x04,0x3a,0x00,0x20,0xe0,0x00,
0x00,0x00,0x00,0x02,0x00,0x00,0x01,0x4d,0x00,0x20,0x07,0x70,0x00,0x00,0x31,0x00,
0x00,0x07,0x00,0x3a,0x00,0x20,0x00,0x0e,0x00,0x06,0x10,0x00,0x00,0x82
};
};

#else // MFX_VA
#include "mfx_h265_cmcopy.h"
using namespace H265Enc;
CmCopy::CmCopy()
    : m_device(NULL)
    , m_program(NULL)
    , m_kernel(NULL)
    , m_queue(NULL)
    , m_task(NULL)
    , m_threadSpace(NULL)
    , m_width(0)
    , m_height(0)
    , m_paddingLuW(0)
    , m_paddingChW(0)
{}
mfxStatus CmCopy::Init(mfxHDL handle, mfxHandleType handleType) {return MFX_ERR_NONE;}
void CmCopy::Close() {}
mfxStatus CmCopy::SetParam(Ipp32s width, Ipp32s height, Ipp32s fourcc, Ipp32s pitchLuma, Ipp32s pitchChroma, Ipp32s paddingLuW, Ipp32s paddingChW) {return MFX_ERR_NONE;}
mfxStatus CmCopy::Copy(mfxHDL video, Ipp8u *luma, Ipp8u *chroma) {return MFX_ERR_NONE;}
#endif // MFX_VA

#endif // MFX_ENABLE_H265_VIDEO_ENCODE2
