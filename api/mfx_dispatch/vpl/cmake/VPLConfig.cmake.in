# ##############################################################################
# Copyright (C) Intel Corporation
#
# SPDX-License-Identifier: MIT
# ##############################################################################

# * Config file for the VPL package It defines the following variables
#   VPL_<component>_FOUND VPL_IMPORTED_TARGETS
#
# VPLConfigVersion.cmake defines VPL_VERSION

# Initialize to default values
set(VPL_INTERFACE_VERSION @API_VERSION_MAJOR@)
get_filename_component(_vpl_config_file
                       "${CMAKE_CURRENT_LIST_DIR}/VPLConfig.cmake" REALPATH)
get_filename_component(_vpl_config_dir "${_vpl_config_file}" DIRECTORY)
get_filename_component(_vpl_install_prefix "${_vpl_config_dir}/../../.."
                       REALPATH)
get_filename_component(VPL_LIB_DIR
                       "${_vpl_install_prefix}/@CMAKE_INSTALL_LIBDIR@" ABSOLUTE)
get_filename_component(
  VPL_INCLUDE_DIR "${_vpl_install_prefix}/@CMAKE_INSTALL_INCLUDEDIR@" ABSOLUTE)
get_filename_component(VPL_BIN_DIR
                       "${_vpl_install_prefix}/@CMAKE_INSTALL_BINDIR@" ABSOLUTE)

if(NOT VPL_IMPORTED_TARGETS)
  set(VPL_IMPORTED_TARGETS "")
endif()

if(NOT VPL_FIND_COMPONENTS)
  set(VPL_FIND_COMPONENTS "dispatcher;api")
  foreach(_vpl_component ${VPL_FIND_COMPONENTS})
    set(VPL_FIND_REQUIRED_${_vpl_component} 1)
  endforeach()
endif()

# VPL::dispatcher
set(VPL_dispatcher_FOUND 0)
set(vpl_system_name ${CMAKE_SYSTEM_NAME})
if(vpl_system_name STREQUAL "Linux")
  get_filename_component(
    _dispatcher_lib "${VPL_LIB_DIR}/libvpl.so.${VPL_INTERFACE_VERSION}"
    ABSOLUTE)
elseif(vpl_system_name STREQUAL "Windows")
  get_filename_component(_dispatcher_lib "${VPL_BIN_DIR}/libvpl.dll" ABSOLUTE)
else()
  message(FATAL_ERROR "Unsupported OS name: ${vpl_system_name}")
endif()

if(EXISTS "${_dispatcher_lib}")
  if(NOT TARGET VPL::dispatcher)
    add_library(VPL::dispatcher SHARED IMPORTED)
    set_target_properties(
      VPL::dispatcher PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                                 "${VPL_INCLUDE_DIR}")
    if(EXISTS "${_dispatcher_lib}")
      set_target_properties(VPL::dispatcher PROPERTIES IMPORTED_LOCATION
                                                       "${_dispatcher_lib}")
      if(vpl_system_name STREQUAL "Windows")
        set_target_properties(
          VPL::dispatcher PROPERTIES IMPORTED_IMPLIB "${VPL_LIB_DIR}/vpl.lib")
      endif()
    endif()
  endif()
  list(APPEND VPL_IMPORTED_TARGETS VPL::dispatcher)
  set(VPL_dispatcher_FOUND 1)
elseif(VPL_FIND_REQUIRED AND VPL_FIND_REQUIRED_dispatcher)
  message(STATUS "Unable to find required VPL component: dispatcher")
  set(VPL_FOUND FALSE)
endif()

unset(_dispatcher_lib)

# VPL::api
set(VPL_api_FOUND 0)
if(EXISTS ${VPL_INCLUDE_DIR})
  if(NOT TARGET VPL::api)
    add_library(VPL::api INTERFACE IMPORTED)
    set_target_properties(VPL::api PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                                              "${VPL_INCLUDE_DIR}")
  endif()
  list(APPEND VPL_IMPORTED_TARGETS VPL::api)
  set(VPL_api_FOUND 1)
endif()
